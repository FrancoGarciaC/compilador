a) let (x:Nat) := 2 in succ x
b) fun(x:Nat).x
c) let (id : Nat -> Nat) := fun(x:Nat).x in id 10
d) let (app5 : (Nat -> Nat) -> Nat) := fun (f:Nat -> Nat).f 5 in app succ
e) fun(x:Nat). fun(y:Nat). ifz x then y else 1

2)
a)fix(double : Nat -> Nat)(x : Nat). ifz x then 0 else succ (succ (double(pred x)))
b)fix(ack : Nat -> Nat -> Nat)(m : Nat). fun (n:Nat) .ifz m then succ n 
                                                       else (ifz n
                                                       then ack (pred m) 1 else ack (pred m) (ack m (pred n)))
          
